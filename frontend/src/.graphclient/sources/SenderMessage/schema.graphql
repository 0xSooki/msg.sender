schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Message {
  id: ID!
  from: Bytes!
  to: Bytes!
  text: String!
  pubkeyX: BigInt!
  pubkeyYodd: Boolean!
  iv: BigInt!
  eventSavedOrNft: Int!
  amount: BigInt!
}

input Message_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: Bytes
  from_not: Bytes
  from_in: [Bytes!]
  from_not_in: [Bytes!]
  from_contains: Bytes
  from_not_contains: Bytes
  to: Bytes
  to_not: Bytes
  to_in: [Bytes!]
  to_not_in: [Bytes!]
  to_contains: Bytes
  to_not_contains: Bytes
  text: String
  text_not: String
  text_gt: String
  text_lt: String
  text_gte: String
  text_lte: String
  text_in: [String!]
  text_not_in: [String!]
  text_contains: String
  text_contains_nocase: String
  text_not_contains: String
  text_not_contains_nocase: String
  text_starts_with: String
  text_starts_with_nocase: String
  text_not_starts_with: String
  text_not_starts_with_nocase: String
  text_ends_with: String
  text_ends_with_nocase: String
  text_not_ends_with: String
  text_not_ends_with_nocase: String
  pubkeyX: BigInt
  pubkeyX_not: BigInt
  pubkeyX_gt: BigInt
  pubkeyX_lt: BigInt
  pubkeyX_gte: BigInt
  pubkeyX_lte: BigInt
  pubkeyX_in: [BigInt!]
  pubkeyX_not_in: [BigInt!]
  pubkeyYodd: Boolean
  pubkeyYodd_not: Boolean
  pubkeyYodd_in: [Boolean!]
  pubkeyYodd_not_in: [Boolean!]
  iv: BigInt
  iv_not: BigInt
  iv_gt: BigInt
  iv_lt: BigInt
  iv_gte: BigInt
  iv_lte: BigInt
  iv_in: [BigInt!]
  iv_not_in: [BigInt!]
  eventSavedOrNft: Int
  eventSavedOrNft_not: Int
  eventSavedOrNft_gt: Int
  eventSavedOrNft_lt: Int
  eventSavedOrNft_gte: Int
  eventSavedOrNft_lte: Int
  eventSavedOrNft_in: [Int!]
  eventSavedOrNft_not_in: [Int!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Message_orderBy {
  id
  from
  to
  text
  pubkeyX
  pubkeyYodd
  iv
  eventSavedOrNft
  amount
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  message(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Message
  messages(
    skip: Int = 0
    first: Int = 100
    orderBy: Message_orderBy
    orderDirection: OrderDirection
    where: Message_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Message!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  message(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Message
  messages(
    skip: Int = 0
    first: Int = 100
    orderBy: Message_orderBy
    orderDirection: OrderDirection
    where: Message_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Message!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Timestamp of the block if available, format depends on the chain"""
  timestamp: String
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}